使用git管理工程项目：

----------------------------------------------------------------------
-----------------第一章.git个人文档处理-------------------------------
----------------------------------------------------------------------

1.创建项目仓库:git init (会创建一个隐藏的.git目录,它就是所谓的git仓库)
2.git config --global user.name "xxxxx"
  git config --global user.email "xxxxxxxxxxxxxxxxxx"
3.如何将不需要的文件不加入管理工程项目
  echo "xxx">.gitignore
4.git add .(将工作树下所有文档生成快照,快照被存放到一个临时的存储区域，git称该区域为索引)
5.使用git commit命令将索引提交至仓库中，每次提交意味着版本在进行一次更新。每次提交都会要求你输入版本更新说明并保存。对于简短的版本更新信息可以使用git commit -m"xxxxx"来保存。
6.git log查看当前项目的日志。也就是你在使用git-commit向仓库提交新版本时所属如的版本更新信息。如果你想看一下每一次版本的大致变动情况,可以使用git log --stat --summary.
7.git show xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(版本号)可以查看该次版本的更新细节。
8.git show xxxxx一般只要使用版本的前几个字符即可。产看版本的更新细节。
9.git show HEAD 显示当前分支的最新版本的更新细节。
10.产看当前项目版本的父版本更新细节。
git show HEAD^  #查看HEAD的父版本更新细节。
git show HEAD^^ #查看HEAD的祖父版本更新细节。
git show HEAD^4 #产看HEAD的祖父之祖父的版本更新细节。
11.我们可以自己对版本号进行自定义，然后就可以使用自定义的版本号查看对应的项目版本更新细节。使用的命令为：git tag v0.1 dfb02  git show.
12.版本控制系统的一个重要的任务是提供撤销和恢复某一阶段工作的功能。
git reset --mixed --soft --hard
由于--hard的杀伤力太大，容易损坏项目仓库，需谨慎使用。
    --mixed是git reset的默认选项，它的作用是重置索引内容，将其定位到指定的项目版本。而不改变你工作树中的所有内容，只是提示你有哪些文件还未更新。
    --soft选项既不触动索引的位置，也不改变工作树中的任何内容，但是会要求它们处于一个良好的次序之内，改选项会保留你在工作树中的任何内容，但是要求它们处于一个良好的次序之内。该选项会保留你在工作树中的所有更新并使之处于待提交状态。
13.man git-xxx查看git命令的使用方法

------------------------------------------------------------------------
---------------------第二章.git团队协同开发-----------------------------
------------------------------------------------------------------------

<<<<<<<两个人对同个项目的处理>>>>>>>>>>
1.git clone 可利用各种网络协议访问远程终端机器中的git仓库,从中导出完整的工作树到本地
例如:git clone lyr@192.168.0.7:~/work/m2ge m2ge
是通过SSH协议访问lyr机器上的lyr账户。
git clone命令只要遇到 账户@IP:工作树路径，就会认为地址是符合SSH协议的。
2.git不分主次仓库，同一个项目的不同仓库都是地位相等的。
3.git pull tzc@192.168.0.5:~/work/m2ge
git pull命令可将属于同一项目的远程仓库与同样属于同一项目的本地仓库进行合并，它包含了两个操作：1.从远程仓库中取出更新版本，2.合并到本地仓库。如果两个人是对不同的文件进行了改动，那么可以不费周折地完成仓库合并。但是如果两个人对一些相同的文件进行了改动，那么在合并时必然会遭遇合并冲突的问题。此时手动修改发生合并冲突的文件，然后将结果提交到本地仓库。
<<<<<<<三人以上至更多人如何协同>>>>>>>>>>>
对于三个人以上的项目，在一个用户那去使用取回合并会使一个人过于疲惫。git提供了一个对偶的命令来处理。
1.git pull:负责从远程仓库取回版本更新，而git push可将本地版本更新推送到远端仓库中。
<<<<<<协同开发>>>>>>>
1.在服务器上创建一颗赤裸的仓库，使用git --bare init --shared
2.某个人可以使用git push m2@192.168.0.2:~/project/m2ge.git master
3.协作人员可以从服务器上拿到仓库。

-----------------------------------------------------------------------
--------------------第三章.项目分支管理--------------------------------
-----------------------------------------------------------------------
git最为世人称道的就是它那强大的项目分支管理功能。现在较为流行的版本控制系统。
诸如cvs,svn等，虽然也提供了项目分支管理功能，但是可用性极低。对于git而言，管理多个项目分支如探囊取物。
1.如何产生项目分支。在前两面并没有提及项目分支问题，但是事实上是有一个分支存在的，那就是master分支，该分支是由git自动产生的。在此之前我们队项目版本的各种操作都是在主分支上进行的。git可以轻松的产生新的项目分支，git branch local，对于新产生的local分支，初始时是完全等同于主分支的。但是,在local分支所进行的所有版本更新工作都不影响主分支，这就意味着作为项目的参与者，可以在local中开始各种各样的更新尝试。
2.查看项目仓库中存在多少分支，可以直接使用git branch ，分支前面存在*符号，表示此分支为当前分支。其实git各分支不存在尊卑之别。只存在哪个分支是当前分支的区别。
3.git不会自动的将当前分支切换其它分支下，要更换分支可以使用git checkout 分支名来切换。
4.分支合并，怎样将分支合并到master分支中，使用git-merge命令可以实现两个分支的合并。
例如：git checkout master
      git merge local
5.删除一个分支:git branch -d 分支名
注意-d选项只能删除已经参与了合并的分支，对于没有合并的分支是无法删除的，如果要不分青红皂白的删除一个分支，可以使用git branch 的-D选项。
6.如何基于git项目分支管理功能实现更为稳健，高效的协同开发机制。







